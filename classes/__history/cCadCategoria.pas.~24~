unit cCadCategoria;

interface

uses System.Classes,
      Vcl.Controls,Vcl.ExtCtrls,vcl.Dialogs,
       ZAbstractConnection, ZConnection,
       ZAbstractRODataset, ZAbstractDataset, ZDataset,System.SysUtils;

type
  TCategoria = class
    private
       ConexaoDB:TZConnection;
       F_categoriaId : Integer;
       F_descricao: String;
    function getCodigo: Integer;
    function getDescricao: string;
    procedure setCodigo(const Value: Integer);
    procedure setDescricao(const Value: string);
    public
      constructor Create(aConexao:TZConnection);
      destructor Destroy; override;
      function Inserir:Boolean;
      function Atualizar:Boolean;
      function Apagar:Boolean;
      function Selecionar(id:Integer):Boolean;

      published
        property  codigo:Integer read getCodigo      write setCodigo;
        property descricao:string read getDescricao   write setDescricao;

  end;

implementation


{ TCategoria }

{$region 'constructor e destructor'}


  constructor TCategoria.Create(aConexao:TZConnection);
  begin
       ConexaoDB := aConexao;
  end;

  destructor TCategoria.Destroy;
  begin

    inherited;
  end;

{$endRegion}

{$region 'get e set'}


  function TCategoria.getCodigo: Integer;
  begin
      Result := Self.F_categoriaId;
  end;

  function TCategoria.getDescricao: string;
  begin
       Result := Self.F_descricao;
  end;


  procedure TCategoria.setCodigo(const Value: Integer);
  begin
       Self.F_categoriaId := Value;
  end;

  procedure TCategoria.setDescricao(const Value: string);
  begin
       Self.F_descricao := Value;
  end;

{$endRegion}

{$region 'CRUD'}

  function TCategoria.Inserir: Boolean;
  var Qry : TZQuery;
  begin
     try
        Result := true;
        Qry :=TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add('Insert into categorias (descricao) values (:descricao)');
        Qry.ParamByName('descricao').AsString := Self.F_descricao;
         try
             Qry.ExecSQL;
         Except
             Result := False;
         end;

     finally
         if Assigned(Qry) then
            FreeAndNil(qry);
     end;
  end;

  function TCategoria.Selecionar(id: Integer): Boolean;
   var Qry : TZQuery;
  begin
  try
   Result := true;
        Qry :=TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add('SELECT  categoriaID , descricao from categorias ' +
        ' Where categoriaID = :categoriaID ') ;
        Qry.ParamByName('categoriaId').AsInteger := id;
        try
          qry.Open;
          self.F_categoriaId := qry.FieldByName('categoriaId').AsInteger;
          Self.F_descricao :=qry.FieldByName('descricao').AsString;
        except
          Result := False;
        end;
  finally
      if Assigned(Qry) then
       FreeAndNil(qry);
  end;

  end;

  function TCategoria.Apagar: Boolean;
  begin
            Showmessage ('Apagado')  ;
      result := True;
  end;

  function TCategoria.Atualizar: Boolean;
   var Qry : TZQuery;
  begin
       try
   Result := true;
        Qry :=TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add(' Update categorias set descricao = :descricao ' +
        '  where categoriaId = :categoriaID ') ;
        Qry.ParamByName('categoriaId').AsInteger := Self.F_categoriaId;
        Qry.ParamByName('descricao').AsString := Self.F_descricao;

        try
          qry.ExecSQL;
        except
          Result := False;
        end;
  finally
      if Assigned(Qry) then
       FreeAndNil(qry);
  end;
  end;

{$endRegion}

end.

unit cCadUsuario;

interface

uses
       System.Classes,Vcl.Controls,Vcl.ExtCtrls,vcl.Dialogs,
       ZAbstractConnection, ZConnection,
       ZAbstractRODataset, ZAbstractDataset, ZDataset,System.SysUtils,
       uFuncaoCriptografia;



  type
  TUsuario = class

  private
    ConexaoDB : TZConnection;
    F_usuarioID: Integer;
    F_nome: String;
    F_senha : String;
    function getSenha:String;
    procedure setSenha (Const Value: String);


  public
    constructor Create(aConexao : TZConnection);
    destructor Destroy ; override;
    function Inserir:Boolean;
    function Atualizar:Boolean;
    function Apagar:Boolean;
    function Selecionar(id:Integer):Boolean;
    function Logar(aUsuario, aSenha: String): Boolean;

  published
    property codigo :Integer read F_usuarioID write F_usuarioID;
    property nome :String read F_nome write F_nome;
    property senha :String read getSenha write setSenha;
  end;

implementation

{$region 'constructor e destructor'}

constructor TUsuario.Create(aConexao:TZConnection);
  begin
    ConexaoDB :=aConexao;
  end;


destructor TUsuario.Destroy;
  begin
    inherited;
  end;


{$endRegion}


{$region 'CRUD'}

  function TUsuario.Apagar: Boolean;
  var Qry : TZQuery;
  begin
      if MessageDlg ('Apagar o Registro: ' + #13 +#13 +
                      'código: ' +IntToStr(F_usuarioID) + #13+
                      'Nome: ' +F_nome,mtConfirmation,[mbYes ,mbNo],0) = mrNo
              then begin
                   result := false;
                    Abort;
                   end;


     try
        Result := true;
        Qry :=TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add(' delete from usuarios ' +
        '  where usuarioId = :usuarioID ') ;
        Qry.ParamByName('usuarioId').AsInteger := F_usuarioID;

        try
          qry.ExecSQL;
        except
          Result := False;
        end;
    finally
      if Assigned(Qry) then
       FreeAndNil(qry);
    end;
  end;


  function TUsuario.Atualizar: Boolean;
   var Qry : TZQuery;
  begin
    try
        Result := true;
        Qry :=TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add(' Update usuarios set nome = :nome , ' +
        '  senha = :senha '+
        '  where usuarioId = :usuarioID ') ;
        Qry.ParamByName('usuarioId').AsInteger := Self.F_usuarioID;
        Qry.ParamByName('nome').AsString := Self.F_nome;
        Qry.ParamByName('senha').AsString := Self.F_senha;

        try
          qry.ExecSQL;
        except
          Result := False;
        end;
    finally
      if Assigned(Qry) then
       FreeAndNil(qry);
    end;
  end;


 function TUsuario.Inserir: Boolean;
  var Qry : TZQuery;
  begin
     try
        Result := true;
        Qry :=TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add('Insert into usuarios (nome , senha ) values (:nome , :senha)');
        Qry.ParamByName('nome').AsString := Self.F_nome;
        Qry.ParamByName('senha').AsString := Self.F_senha  ;
         try
             Qry.ExecSQL;
         Except
             Result := False;
         end;

     finally
         if Assigned(Qry) then
            FreeAndNil(qry);
     end;
  end;

  function TUsuario.Selecionar(id: Integer): Boolean;
   var Qry : TZQuery;
  begin
  try
   Result := true;
        Qry :=TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add('SELECT  usuarioID , nome, senha from usuarios ' +
        ' Where usuarioID = :usuarioID ') ;
        Qry.ParamByName('usuarioId').AsInteger := id;
        try
          qry.Open;
          self.F_usuarioID := qry.FieldByName('usuarioId').AsInteger;
          Self.F_nome :=qry.FieldByName('nome').AsString;
          Self.F_senha  :=qry.FieldByName('senha').AsString;
        except
          Result := False;
        end;
  finally
      if Assigned(Qry) then
       FreeAndNil(qry);
  end;

  end;


{$endRegion}

{$region 'get e set'}

function  TUsuario.getSenha: String;
begin
   Result := Descriptografar(self.F_senha);
end;

procedure TUsuario.setSenha(const Value :String);
begin
    Self.F_senha := Criptografar(Value);
end;

{$endRegion}

 function TUsuario.Logar(aUsuario: String ; aSenha :String) : Boolean;
// var Qry:TZQuery;
 begin
    Result := true;


 end;

end.


unit cProVenda;

interface

uses System.Classes,
      Vcl.Controls,Vcl.ExtCtrls,vcl.Dialogs,
      ZAbstractConnection, ZConnection,
      ZAbstractRODataset, ZAbstractDataset, ZDataset,System.SysUtils ,Data.DB,
      Datasnap.DBClient , uEnum ,cControleEstoque;

 type
   TVenda = class
     private

       ConexaoDB: TZConnection;
       F_vendaID : Integer;
       F_clienteID : Integer;
       F_dataVenda  : TDateTime;
       F_totalVenda  : Double;
    function ApagaItens(cds: TClientDataSet): Boolean;
    function InNot(cds: TclientDataSet): String;
    function EsteItemExiste(vendaId, produtoId: Integer): Boolean;
    function AtualizarItem(cds: TClientDataSet): Boolean;
    procedure RetornarEstoque(sCodigo: String; Acao: TAcaoExcluirEstoque);
    procedure BaixarEstoque(produtoId: Integer; Quantidade: Double);
    function Apagar_item_especifico(Id: Integer): Boolean;



    public

      constructor Create(aConexao:TZConnection);
      destructor Destroy; override;
      function Inserir (cds:TClientDataSet):Integer;
      function Atualizar(cds: TClientDataSet): Boolean;
      function Apagar  (cds : TClientDataSet):Boolean;
      function InserirItens(cds: TClientDataSet; IdVenda: Integer): Boolean;
      function Selecionar(id: Integer; var cds: TClientDataSet): Boolean;



   published
      property VendaId : Integer          read    F_vendaID       write   F_vendaID ;
      property ClienteId : Integer      read    F_clienteID     write   F_clienteID;
      property Datavenda : TDateTime    read    F_dataVenda     write   F_dataVenda ;
      property TotalVenda : Double      read    F_totalVenda    write   F_totalVenda ;

   end;


implementation

{$region 'Construtor and Destructor'}

 constructor TVenda.Create(aConexao:TZConnection);
  begin
    ConexaoDB :=aConexao;
  end;


destructor TVenda.Destroy;
  begin
    inherited;
  end;

  {$endRegion}

{$region 'CRUD'}

function Tvenda.Apagar  (cds : TClientDataSet) : Boolean;
var Qry : TzQuery;
begin
    if MessageDlg('Apagar o Registro: ' + #13 +#13 +
         'Venda Nr:  ' + IntToStr(vendaID ), mtConfirmation,[mbYes ,mbNo],0)= mrNo then begin
          Result :=false;
          Abort;
     end;

     try
        Result := true;
        ConexaoDB.StartTransaction;
        Qry := TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        // Apagar  os itens
        while not cds.Eof do begin
        // metodo criado para apagar os itens do produto antes do delete
        // e processar o estoque de volta
        Apagar_item_especifico(cds.FieldByName('produtoId').AsInteger);
        cds.Next;

       end;

       try
         Qry.SQL.Clear;
         Qry.SQL.Add('DELETE FROM vendas ' +
          ' where vendaId = :vendaId '   ) ;
         Qry.ParamByName('vendaid').AsInteger := VendaId;
         Qry.ExecSQL;
         ConexaoDB.Commit;
       Except
          ConexaoDB.Rollback;
          Result:= False;
       end;

     finally
     if Assigned(Qry) then
        FreeAndNil(Qry);

     end;

end;

function TVenda.Atualizar (cds : TClientDataSet): Boolean;
  var qry : TZQuery;
begin
       try
           Result := true;
           ConexaoDB.StartTransaction;
           Qry :=TZQuery.Create(nil);
           Qry.Connection := ConexaoDB;
           Qry.SQL.Clear;
           Qry.SQL.Add( 'Update vendas set ' +
                        ' clienteId = :clienteId ' +
                        ' , dataVenda = :datavenda  '  +
                        ' , totalVenda = :totalVenda ' +
                        '  where vendaId = :vendaId  '    );

          Qry.ParamByName('ClienteId').AsInteger  := Self.F_clienteId;
          Qry.ParamByName('vendaId').AsInteger := Self.F_vendaID;
          Qry.ParamByName('datavenda').AsDateTime := Self.F_dataVenda;
          Qry.ParamByName('totalvenda').AsFloat := Self.F_totalVenda;

          try
              //Update Vendas;
              Qry.ExecSQL;
              ApagaItens(cds);

              cds.First;
              while not cds.Eof do begin
                  if EsteItemExiste(Self.F_vendaID , cds.FieldByName('produtoId').AsInteger ) then  begin
                        AtualizarItem(cds);
                  end
                  else begin
                      InserirItens(cds, Self.F_vendaID);
                  end;
                  
                 cds.Next;
              end;




             Qry.ExecSQL ;
             ConexaoDB.Commit;
          Except
              Result:= false;
              ConexaoDB.Rollback;
          end;


       finally
           if Assigned(qry) then
          FreeAndNil(Qry);

       end;




end;

function TVenda.EsteItemExiste (vendaId : Integer ; produtoId: Integer) :Boolean;
var Qry : TZQuery;
begin
      try
      

        Qry := TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add(' SLECT Count (vendaId) As Qtde ' +
                    ' FROM VendasItens ' +
                    ' WHERE vendaId = :vendaId and produtoId = :produtoId '  );
        Qry.ParamByName('vendaId').AsInteger := vendaid;
        Qry.ParamByName('produtoId').AsInteger := produtoId;

        try
          Qry.Open;

          if Qry.FieldByName('Qtde').AsInteger > 0 then
              Result := true
          else
              Result := false;

        Except 
            Result := False;
        end;

        
      finally
        if Assigned(qry) then
         FreeAndNil(qry);
      end;

end;

function TVenda.ApagaItens(cds : TClientDataSet) : Boolean;
var Qry: TZQuery;
sCodNoCds:String;
begin
    try
        Result := true;
        // pega os codigos que estão no clientDataset para selecionar no int not
        // no banco de dados

        sCodNoCds := InNot(cds) ;


        // Retorna estoque

        RetornarEstoque(sCodNoCds,aeeApagar);

        Qry := TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add(' DELETE FROM VendasItens where VendaId = :VendaId ' +
        ' AND  produtoId not IN ( ' + sCodNoCds + ') ' );
        Qry.ParamByName('vendaId').AsInteger := Self.F_vendaID;

        try
            ConexaoDB.StartTransaction;
            Qry.ExecSQL;
            ConexaoDB.Commit
         Except
             ConexaoDB.Commit;
             Result := False;
         end;

    finally
      if Assigned (Qry) then
          FreeAndNil(Qry);
    end;
end;

function TVenda.Apagar_item_especifico(Id : Integer) : Boolean;
var Qry: TZQuery;
begin
    try
        Result := true;


        // Retorna estoque  usado o aeeAlterar pois o sql seria o mesmo
        RetornarEstoque (IntToStr(id) ,aeeAlterar);

        Qry := TZQuery.Create(nil);
        Qry.Connection := ConexaoDB;
        Qry.SQL.Clear;
        Qry.SQL.Add(' DELETE FROM VendasItens where VendaId = :VendaId  and  ' +
         ' produtoId = :produtoId ' )  ;
        Qry.ParamByName('vendaId').AsInteger := Self.F_vendaID;
        Qry.ParamByName('produtoId').AsInteger := Id;

        try
          Qry.ExecSQL;
        Except
          Result := False;
        end;

    finally
      if Assigned (Qry) then
          FreeAndNil(Qry);
    end;
end;

function TVenda.InNot (cds : TclientDataSet):String;
var sInNot:String ;
begin
    sInNot := EmptyStr;
    cds.First;
      while not cds.Eof do begin
        if sInNot=EmptyStr then
          sInNot := cds.FieldByName('produtoId').AsString
        else
          sInNot := sInNot + ',' + cds.FieldByName('produtoId').AsString;

        cds.Next;
      end;

    Result := sInNot;
end;


function TVenda.Inserir(cds:TClientDataSet) : Integer;
var qry :TZQuery;
    IdVendaGerado : integer;
begin
       try

           ConexaoDB.StartTransaction;
           Qry :=TZQuery.Create(nil);
           Qry.Connection := ConexaoDB;
           Qry.SQL.Clear;
           Qry.SQL.Add('insert into vendas ( clienteId , datavenda, totalvenda ) ' +
                     ' values (:clienteid , :datavenda , :totalvenda ) '  );


          qry.ParamByName('clienteid').AsInteger := Self.F_clienteID;
          qry.ParamByName('datavenda').AsDateTime := Self.F_dataVenda;
          qry.ParamByName('totalvenda').AsFloat :=  Self.F_totalVenda;

          try
             Qry.ExecSQL   ;
             //Recupera o id Gerado no insert
              Qry.SQL.Clear;
              Qry.SQL.Add( 'Select SCOPE_IDENTITY () AS ID' );
              QRY.Open;

              // ID da tabela master (Venda)
              IdVendaGerado :=Qry.FieldByName('Id').AsInteger;

              //Gravar itens na tabela VendasItens
              cds.First;
              while not cds.Eof do begin
                InserirItens(cds, idVendaGerado);
                cds.Next;
              end;



              ConexaoDB.Commit;
              Result := IdVendaGerado;

          Except
              ConexaoDB.Rollback;
              Result:= -1;
          end;

       finally
           if Assigned(qry) then
          FreeAndNil(Qry);

       end;
end;

function TVenda.Selecionar(id: Integer ;  var cds: TClientDataSet ): Boolean;
var qry : TZQuery;
begin
       try

           Result := true;
           Qry :=TZQuery.Create(nil);
           Qry.Connection := ConexaoDB;
           Qry.SQL.Clear;
           Qry.SQL.Add('select  vendaid, clienteid, datavenda , totalvenda from vendas ' +
                         ' where vendaId = :vendaId ');

          Qry.ParamByName('vendaId').AsInteger  := id;

          try
              Qry.Open;

              Self.F_clienteId :=    Qry.FieldByName('clienteId').AsInteger;
              Self.F_dataVenda  := Qry.FieldByName('DataVenda').asDateTime;
              Self.F_vendaID := Qry.FieldByName('vendaId').AsInteger;
              Self.F_totalVenda := Qry.FieldByName('totalvenda').AsFloat;

           {$region 'SELECIONAR na tabela VendasItens'}
           //Apaga o ClientDataSet Caso esteja com Registro
           cds.First;
           while not cds.Eof do begin
             cds.Delete;
           end;

           //Seleciona os Itens do Banco de dados com a propriedade F_VendaId
           Qry.Close;
           Qry.SQL.Clear;
           Qry.SQL.Add('SELECT VendasItens.ProdutoID, '+
                  '       Produtos.Nome, '+
                  '       VendasItens.ValorUnitario, '+
                  '       VendasItens.Quantidade, '+
                  '       VendasItens.TotalProduto '+
                  '  FROM VendasItens  '+
                  '       INNER JOIN produtos On Produtos.produtoId = VendasItens.produtoId '+
                  ' WHERE VendasItens.VendaID=:VendaID ');
            Qry.ParamByName('VendaID').AsInteger    := Self.F_vendaId;
            Qry.Open;

           //Pega da Query e Coloca no ClientDataSet
            Qry.First;
             while not Qry.Eof do begin
               cds.Append;
               cds.FieldByName('produtoId').AsInteger       := Qry.FieldByName('ProdutoID').AsInteger;
               cds.FieldByName('nomeProduto').AsString      := Qry.FieldByName('Nome').AsString;
               cds.FieldByName('valorUnitario').AsFloat     := Qry.FieldByName('ValorUnitario').AsFloat;
               cds.FieldByName('quantidade').AsFloat        := Qry.FieldByName('Quantidade').AsFloat;
               cds.FieldByName('valorTotalProduto').AsFloat := Qry.FieldByName('TotalProduto').AsFloat;
               cds.Post;
               Qry.Next;
              end;
            cds.First;
          {$endRegion}

          Except
              Result:= false;
          end;

       finally
           if Assigned(qry) then
          FreeAndNil(Qry);

    end;


end;


{$endRegion}

function TVenda.InserirItens( cds: TClientDataSet; IdVenda : Integer) : Boolean;
var Qry:TZQuery;
begin
  try
    Result := true;
           Qry := TZQuery.Create(nil);
           Qry.Connection := ConexaoDB;
           Qry.SQL.Clear;
           Qry.SQL.Add('insert into vendasItens ' +
           '( VendaId ,ProdutoID , ValorUnitario, Quantidade,TotalProduto ) ' +
           ' values (:vendaId , :produtoId , :valorUnitario , :quantidade, :totalProduto ) '  );

          qry.ParamByName('vendaId').AsInteger := IdVenda;
          qry.ParamByName('ProdutoId').AsInteger :=  cds.FieldByName('produtoId').AsInteger;
          qry.ParamByName('ValorUnitario').AsFloat := cds.FieldByName('valorUnitario').AsFloat;
          qry.ParamByName('Quantidade').AsFloat := cds.FieldByName('Quantidade').AsFloat;
          qry.ParamByName('TotalProduto').AsFloat := cds.FieldByName('valorTotalProduto').AsFloat;

          try
             ConexaoDB.StartTransaction;
             Qry.ExecSQL   ;
             ConexaoDB.Commit;
             BaixarEstoque(cds.FieldByName('produtoId').AsInteger,cds.FieldByName('quantidade').AsFloat );
          Except
             ConexaoDB.Rollback;
             Result := False;

          end;
        finally
           if Assigned(qry) then
          FreeAndNil(Qry);

       end;


end;

 function TVenda.AtualizarItem (cds : TClientDataSet) : Boolean;
 var Qry : TZQuery;
 begin

       try

           Result := true;
           Qry := TZQuery.Create(nil);
           Qry.Connection := ConexaoDB;
           Qry.SQL.Clear;
           Qry.SQL.Add (' UPDATE VendasItens ' +
                        ' SET ValorUnitario = :ValorUnitario ' +
                        ' , Quantidade = :Quantidade ' +
                        ' , TotalProduto = :TotalProduto ' +
                        ' Where vendaId = :vendaId and produtoId = :produtoId ');

          Qry.ParamByName('VendaID').AsInteger := Self.F_vendaID;
          Qry.ParamByName('ProdutoID').AsInteger := cds.FieldByName('produtoId').AsInteger;
          Qry.ParamByName('ValorUnitario').AsFloat := cds.FieldByName('valorUnitario').AsFloat;
          Qry.ParamByName('Quantidade').AsFloat := cds.FieldByName('quantidade').AsFloat;
          Qry.ParamByName('TotalProduto').AsFloat := cds.FieldByName('valorTotalProduto').AsFloat;

          try
            ConexaoDB.StartTransaction;
            Qry.ExecSQL    ;
             ConexaoDB.Commit;
            BaixarEstoque(cds.FieldByName('produtoID').AsInteger , cds.FieldByName('quantidade').AsFloat);
          Except
            ConexaoDB.Rollback;
            Result := False;
          end;

       finally
          if Assigned(Qry) then
          FreeAndNil(Qry);

       end;
 end;

  {$region 'Controle de estoque '}
  //Utilizar no update e Delete do item 

 Procedure Tvenda.RetornarEstoque(sCodigo : String ;Acao: TAcaoExcluirEstoque);

  var Qry : TZQuery;
  oControleEstoque : TControleEstoque;
 begin
    Qry := TZQuery.Create(nil);
    Qry.Connection := ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add(' SELECT produtoId, quantidade '+
                ' FROM VendasItens  ' +
                ' WHERE VendaId = :vendaId ' );
    if Acao = aeeApagar then
        Qry.SQL.Add(' AND produtoId not in ( ' + sCodigo + ' )' )
    else
        Qry.SQL.Add(' AND produtoId = ( ' + sCodigo + ') ' );

    Qry.ParamByName('vendaId').AsInteger := Self.F_vendaID;

    try
      oControleEstoque := TControleEstoque.Create(ConexaoDB);
      Qry.Open;
      Qry.First;
        while not Qry.Eof do begin
          oControleEstoque.ProdutoId := Qry.FieldByName('produtoId').AsInteger;
          oControleEstoque.Quantidade := Qry.FieldByName('quantidade').AsFloat;
          oControleEstoque.RetornarEstoque;
          Qry.Next;
        end;

      
    finally
           if Assigned (oControleEstoque) then
            FreeAndNil(oControleEstoque);
    end;

 end;

 // Insert

 procedure Tvenda.BaixarEstoque(produtoId : Integer ; Quantidade :Double);
 var oControleEstoque : TControleEstoque;
 begin
 
      try
        oControleEstoque := TControleEstoque.Create(ConexaoDB);
        oControleEstoque.ProdutoId := produtoId;
        oControleEstoque.Quantidade := Quantidade;
        oControleEstoque.BaixarEstoque; 
      
      finally
        if Assigned (oControleEstoque) then
            FreeAndNil(oControleEstoque);
      end;
      
 end;

 {$endRegion}

end.

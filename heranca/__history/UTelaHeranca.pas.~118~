unit UTelaHeranca;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.ExtCtrls, Data.DB,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, Vcl.DBCtrls, Vcl.Grids,
  Vcl.DBGrids, Vcl.StdCtrls, Vcl.Buttons, Vcl.Mask,uDTMConexao,UEnum,
  RxToolEdit, RxCurrEdit, ZAbstractConnection, ZConnection;

type
  TfrmTelaHeranca = class(TForm)
    pgcPrincipal: TPageControl;
    btnRodape: TPanel;
    tabListagem: TTabSheet;
    tabManutencao: TTabSheet;
    pnlListagemTopo: TPanel;
    mskPesquisar: TMaskEdit;
    btnPesquisar: TBitBtn;
    grdListagem: TDBGrid;
    btnNovo: TBitBtn;
    btnAlterar: TBitBtn;
    btnCancelar: TBitBtn;
    btnGravar: TBitBtn;
    btnApagar: TBitBtn;
    btnFechar: TBitBtn;
    btnNavigator: TDBNavigator;
    qryListagem: TZQuery;
    dtsListagem: TDataSource;
    lblIndice: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnApagarClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure grdListagemTitleClick(Column: TColumn);
    procedure mskPesquisarChange(Sender: TObject);
    procedure grdListagemDblClick(Sender: TObject);
    procedure grdListagemKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnPesquisarClick(Sender: TObject);
  private
    { Private declarations }
      SelectOriginal : String;

        procedure ControlarBotoes(btnNovo, btnAlterar ,btnCancelar,btnGravar,
      btnApagar: TBitBtn; Navegador : TDBNavigator; pgcPrincipal: TPageControl;
      Flag :Boolean   );
    procedure ControlarIndiceTab(pgcPrincipal: TPageControl; Indice: Integer);
    function RetornarCampoTraduzido(Campo: String): string;
    procedure ExibirLabelIndice(Campo: string; aLabel: TLabel);
    function ExisteCampoObrigatorio: Boolean;
    procedure DesabilitarEditPK;
    procedure LimparEdits;

  public
    { Public declarations }
    IndiceAtual : string;
    EstadoDoCadastro : TEstadoDoCadastro;
    function APagar:Boolean; virtual;
    function Gravar(EstadoDoCadastro : TEstadoDoCadastro) :Boolean; virtual;
    procedure BloqueiaCtrl_del_DBGrid(var Key: Word; Shift: TShiftState);
    class function TenhoAcesso(aUsuarioId : Integer ; aChave : string ; aConexao : TZConnection ) : Boolean ; static;

  end;

var
  frmTelaHeranca: TfrmTelaHeranca;

implementation

uses  uPrincipal;
{$R *.dfm}

{$region 'Observações'     }
  // TAG: 1 - chave primaria - PK
  // TAG: 2 - campos obrigatórios  - PK
{$endregion }

{$region 'Funções e procedures' }

procedure TfrmTelaHeranca.FormClose(Sender: TObject; var Action: TCloseAction);
begin
      qryListagem.Close;
end;

procedure TfrmTelaHeranca.FormCreate(Sender: TObject);
begin
       qryListagem.Connection :=  dtmPrincipal.ConexaoDB;
       dtsListagem.DataSet := qryListagem;
       grdListagem.DataSource :=   dtsListagem;
       grdListagem.Options:= [dgTitles,dgIndicator,dgColumnResize,dgColLines,
       dgRowLines,dgTabs,dgRowSelect,dgAlwaysShowSelection,dgCancelOnExit,
       dgTitleClick,dgTitleHotTrack]    ;

end;

procedure TfrmTelaHeranca.FormShow(Sender: TObject);
begin
    if (qryListagem.SQL.Text <> EmptyStr) then begin
      qryListagem.IndexFieldNames:=IndiceAtual;
      ExibirLabelIndice(IndiceAtual,lblIndice);
      SelectOriginal := qryListagem.SQL.Text;
      qryListagem.Open;
    end;
    ControlarIndiceTab(pgcPrincipal, 0);
    DesabilitarEditPK;
    ControlarBotoes( btnNovo, btnAlterar ,btnCancelar,btnGravar,
      btnApagar,btnNavigator,pgcPrincipal,true) ;

end;


procedure TfrmTelaHeranca.grdListagemDblClick(Sender: TObject);
begin
   btnAlterar.Click;
end;

procedure TfrmTelaHeranca.grdListagemKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
     BloqueiaCtrl_del_DBGrid ( Key,Shift)    ;
end;

procedure TfrmTelaHeranca.grdListagemTitleClick(Column: TColumn);
begin
  IndiceAtual :=  Column.FieldName;
  qryListagem.IndexFieldNames :=  IndiceAtual;
  ExibirLabelIndice(IndiceAtual,lblIndice);

end;

procedure TfrmTelaHeranca.mskPesquisarChange(Sender: TObject);
begin
    qryListagem.Locate(IndiceAtual,UpperCase(TMaskEdit(Sender).Text) , [loPartialKey]);
    //  Ambos modos funciona em cima pela classe do pesquisar em baixo pelo nome do campo pesquisar
    // qryListagem.Locate(IndiceAtual,mskPesquisar.Text, [loPartialKey]);

end;

procedure TfrmTelaHeranca.ControlarIndiceTab(pgcPrincipal: TPageControl;
Indice: Integer);
begin
       if(pgcPrincipal.Pages[Indice].TabVisible)then
           pgcPrincipal.TabIndex := Indice;
end;

function TfrmTelaHeranca.RetornarCampoTraduzido(Campo:String):string ;
var i: Integer;
begin
    for I := 0 to qryListagem.Fields.Count -1 do  begin;
        if LowerCase( qryListagem.Fields[i].FieldName) = LowerCase(Campo) then begin
          Result:= qryListagem.Fields[i].DisplayLabel;
         Break;
        end;
    end;
end;


class function TfrmTelaHeranca.TenhoAcesso(aUsuarioId: Integer; aChave: string;
  aConexao: TZConnection): Boolean;
var Qry: TZQuery;
begin
   try
     Result := true;
     Qry := TZQuery.Create(nil);
     Qry.Connection := aConexao;
     Qry.SQL.Clear;
     Qry.SQL.Add(' SELECT usuarioId FROM usuariosAcaoAcesso '  +
                 ' WHERE usuarioId = :usuarioId '  +
                 '  AND acaoAcessoID = (SELECT TOP 1 acaoAcessoId FROM acaoAcesso ' +
                 '    WHERE chave = :chave ) AND ativo = 1 ');

     Qry.ParamByName('usuarioId').AsInteger := aUsuarioId;
     Qry.ParamByName('chave').AsString := aChave;

     Qry.Open;

     if Qry.IsEmpty then
        Result := false;

   finally
      if Assigned(Qry) then
         FreeAndNil(Qry);
   end;
end;

procedure  TfrmTelaHeranca.ExibirLabelIndice(Campo:string ; aLabel:TLabel);
begin
     aLabel.Caption:=RetornarCampoTraduzido(Campo);
end;

function  TfrmTelaHeranca.ExisteCampoObrigatorio:Boolean;
var i:Integer;
begin
    Result:=False;
    for i := 0 to ComponentCount -1 do begin
        if (Components[i] is TLabeledEdit) then begin
          if (TLabeledEdit(Components[i]).Tag = 2) and
             (TLabeledEdit(Components[i]).Text = EmptyStr ) then begin
             MessageDlg(TLabeledEdit(Components[i]).EditLabel.Caption +
             ' é um campo obrigatorio ',TMsgDlgType.mtInformation,[TMsgDlgBtn.mbOK],0);
             TLabeledEdit(Components[i]).SetFocus;
             Result:= true;
             break;
             end;
        end;
    end;

end;

procedure  TfrmTelaHeranca.DesabilitarEditPK;
 var i:Integer;
begin
    for i := 0 to ComponentCount -1 do begin
        if (Components[i] is TLabeledEdit) then begin
          if (TLabeledEdit(Components[i]).Tag = 1) then begin
              TLabeledEdit(Components[i]).Enabled := false;
              break;
          end;
        end;
    end;
end;


procedure  TfrmTelaHeranca.LimparEdits  ;
  var i:Integer;
begin
    for i := 0 to ComponentCount -1 do begin
        if (Components[i] is TLabeledEdit) then
              TLabeledEdit(Components[i]).Text := EmptyStr
          else if (Components[i] is TEdit) then
              TEdit(Components[i]).Text := EmptyStr
          else if (Components[i] is TMaskEdit) then
              TMaskEdit(Components[i]).Text := EmptyStr
          else if (Components[i] is TMemo) then
              TMemo(Components[i]).Text := ''
          else if (Components[i] is TCurrencyEdit) then
              TCurrencyEdit(Components[i]).Value := 0
          else if (Components[i] is TDateEdit) then
              TDateEdit(Components[i]).Date := 0
          else if (Components[i] is TDBLookupComboBox) then
              TDBLookupComboBox(Components[i]).KeyValue := null;


    end;
end;


{$endregion}

{$region 'metodos virtuais'}

function TfrmTelaHeranca.Apagar: Boolean;
begin
   ShowMessage('Deletado') ;
   Result := true;

end;

function TfrmTelaHeranca.Gravar(EstadoDoCadastro: TEstadoDoCadastro): Boolean;
begin
    if(EstadoDoCadastro=ecInserir)then
      ShowMessage('inserir')
    else if (EstadoDoCadastro=ecAlterar) then
      ShowMessage('Alterado')   ;
    Result:=True;
end;


{$endregion}

// procedure de controle de tela
procedure TfrmTelaHeranca.ControlarBotoes(btnNovo, btnAlterar ,btnCancelar,btnGravar,
      btnApagar: TBitBtn; Navegador : TDBNavigator; pgcPrincipal: TPageControl;
      Flag :Boolean   );
begin
     btnNovo.Enabled  := Flag;
     btnApagar.Enabled  := Flag;
     btnAlterar.Enabled := Flag;
     Navegador.Enabled := Flag;
     pgcPrincipal.Pages[0].TabVisible := Flag ;
     btnCancelar.Enabled :=  not(Flag);
     btnGravar.Enabled := not(Flag);

end;



procedure TfrmTelaHeranca.btnNovoClick(Sender: TObject);
begin
      if not TenhoAcesso(oUsuarioLogado.codigo , self.Name+ '_'+TBitBtn(Sender).Name,
                         dtmPrincipal.conexaoDB)  then
      begin
          MessageDlg('Usuário : ' + oUsuarioLogado.nome +
           ', não tem permissão de acesso', mtWarning ,[mbOK],0 ) ;
          Abort;
      end;


    ControlarBotoes( btnNovo, btnAlterar ,btnCancelar,btnGravar,
      btnApagar,btnNavigator,pgcPrincipal,false)  ;
     EstadoDoCadastro  := ecInserir;
     LimparEdits;
end;

procedure TfrmTelaHeranca.btnPesquisarClick(Sender: TObject);
var I : integer ;
  TipoCampo : TFieldType;
  NomeCampo : String;
  whereOrAnd : String;
  condicaoSql : String;

begin

      if not TenhoAcesso(oUsuarioLogado.codigo , self.Name+ '_'+TBitBtn(Sender).Name,
                         dtmPrincipal.conexaoDB)  then
      begin
          MessageDlg('Usuário : ' + oUsuarioLogado.nome +
           ', não tem permissão de acesso', mtWarning ,[mbOK],0 ) ;
          Abort;
      end;

      if mskPesquisar.Text = '' then
       begin
          qryListagem.Close;
          qryListagem.SQL.Clear;
          qryListagem.SQL.Add(SelectOriginal);
          qryListagem.Open;
          abort;
       end;

       for i := 0 to qryListagem.FieldCount -1 do
       begin
           if qryListagem.Fields[i].FieldName = IndiceAtual then
            begin
             TipoCampo := qryListagem.Fields[i].DataType;
             NomeCampo := qryListagem.Fields[i].FieldName;
             Break;
            end;
       end;

       if pos('where', lowerCase(SelectOriginal)) > 1 then
        begin
            whereOrAnd := ' and '
        end
        else begin
            whereOrAnd := ' where '
        end;

     if (TipoCampo=ftString) or (TipoCampo= ftWideString) then
        begin
           condicaoSql :=  whereOrAnd + ' ' + NomeCampo + ' like ' +
           QuotedStr('%'+ mskPesquisar.Text+'%' )
        end
        else if(TipoCampo = ftInteger) or (TipoCampo = ftSmallint) then
        begin
            condicaoSql :=  whereOrAnd + ' ' + NomeCampo + ' = ' +mskPesquisar.Text
        end
        else if (TipoCampo = ftDate) or (TipoCampo = ftDateTime) then
        begin
            condicaoSql := whereOrAnd +' ' + NomeCampo + ' = ' + QuotedStr(mskPesquisar.Text);
        end;

        qryListagem.Close;
        qryListagem.SQL.Clear;
        qryListagem.SQL.Add(SelectOriginal);
        qryListagem.SQL.Add(condicaoSql);
        qryListagem.Open;
        mskPesquisar.Text := '';
        mskPesquisar.SetFocus;

end;

procedure TfrmTelaHeranca.btnAlterarClick(Sender: TObject);
begin
       if not TenhoAcesso(oUsuarioLogado.codigo , self.Name+ '_'+TBitBtn(Sender).Name,
                         dtmPrincipal.conexaoDB)  then
      begin
          MessageDlg('Usuário : ' + oUsuarioLogado.nome +
           ', não tem permissão de acesso', mtWarning ,[mbOK],0 ) ;
          Abort;
      end;

  ControlarBotoes( btnNovo, btnAlterar ,btnCancelar,btnGravar,
      btnApagar,btnNavigator,pgcPrincipal,false) ;
      EstadoDoCadastro  := ecAlterar;
end;

procedure TfrmTelaHeranca.btnApagarClick(Sender: TObject);
begin

   if not TenhoAcesso(oUsuarioLogado.codigo , self.Name+ '_'+TBitBtn(Sender).Name,
                         dtmPrincipal.conexaoDB)  then
      begin
          MessageDlg('Usuário : ' + oUsuarioLogado.nome +
           ', não tem permissão de acesso', mtWarning ,[mbOK],0 ) ;
          Abort;
      end;
try
        if (Apagar) then begin
        ControlarBotoes( btnNovo, btnAlterar ,btnCancelar,btnGravar,
           btnApagar,btnNavigator,pgcPrincipal,true)  ;
        ControlarIndiceTab(pgcPrincipal, 0);
        LimparEdits;
         qryListagem.Refresh;
     end
     else begin
       MessageDlg('Erro ao excluir',TMsgDlgType.mtError, [TMsgDlgBtn.mbOK],0) ;
     end;
  finally
      EstadoDoCadastro  := ecNenhum;
  end;
end;

procedure TfrmTelaHeranca.btnCancelarClick(Sender: TObject);
begin

    ControlarBotoes( btnNovo, btnAlterar ,btnCancelar,btnGravar,
      btnApagar,btnNavigator,pgcPrincipal,true) ;
      ControlarIndiceTab(pgcPrincipal, 0);
        EstadoDoCadastro  := ecNenhum;
        LimparEdits;
end;

procedure TfrmTelaHeranca.btnGravarClick(Sender: TObject);
begin
       if not TenhoAcesso(oUsuarioLogado.codigo , self.Name+ '_'+TBitBtn(Sender).Name,
                         dtmPrincipal.conexaoDB)  then
      begin
          MessageDlg('Usuário : ' + oUsuarioLogado.nome +
           ', não tem permissão de acesso', mtWarning ,[mbOK],0 ) ;
          Abort;
      end;

 if(ExisteCampoObrigatorio) then
    abort;

  try
    if Gravar(EstadoDoCadastro) then begin
        ControlarBotoes( btnNovo, btnAlterar ,btnCancelar,btnGravar,
              btnApagar,btnNavigator,pgcPrincipal,true) ;
        ControlarIndiceTab(pgcPrincipal, 0);
        EstadoDoCadastro  := ecNenhum;
        LimparEdits;
        qryListagem.Refresh;
    end
    else begin
      MessageDlg('Erro ao gravar', TMsgDlgType.mtError ,[TMsgDlgBtn.mbOK],0) ;
    end;
  finally
  end;
end;

procedure TfrmTelaHeranca.BloqueiaCtrl_del_DBGrid(var Key: Word ; Shift : TShiftState);
begin
 // bloqueia o CTRL + DEL
 if (Shift = [ssCtrl]) and (Key = 46) then
    Key := 0;


end;



procedure TfrmTelaHeranca.btnFecharClick(Sender: TObject);
begin
 Close;
end;

end.

unit UProVendas;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UTelaHeranca, Data.DB, uCadCliente,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, Vcl.DBCtrls, Vcl.Grids, uConCliente
  Vcl.DBGrids, Vcl.StdCtrls, Vcl.Buttons, Vcl.Mask, Vcl.ExtCtrls, Vcl.ComCtrls,
  uDTMConexao, UDTMVenda, RxToolEdit, RxCurrEdit , cProVenda , uEnum , cFuncao
  , uConProduto,UCadProduto;

type
  TfrmProVenda = class(TfrmTelaHeranca)
    qryListagemvendaId: TIntegerField;
    qryListagemclienteId: TIntegerField;
    qryListagemnome: TWideStringField;
    qryListagemdataVenda: TDateTimeField;
    qryListagemtotalVenda: TFloatField;
    edtVendasId: TLabeledEdit;
    lkpCliente: TDBLookupComboBox;
    Label4: TLabel;
    edtDataVenda: TDateEdit;
    Label1: TLabel;
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Panel4: TPanel;
    edtValorTotal: TCurrencyEdit;
    Label2: TLabel;
    DBGridItensVenda: TDBGrid;
    lkpProduto: TDBLookupComboBox;
    Label3: TLabel;
    edtValorUnitario: TCurrencyEdit;
    btnAdicionarItem: TBitBtn;
    btnAPagarItem: TBitBtn;
    edtQuantidade: TCurrencyEdit;
    edtTotalProduto: TCurrencyEdit;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    btnPesquisarProduto: TSpeedButton;
    btnIncluirProduto: TSpeedButton;
    btnIncluirCliente: TSpeedButton;
    btnPesquisarCliente: TSpeedButton;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure DBGridItensVendaKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnAdicionarItemClick(Sender: TObject);
    procedure lkpProdutoExit(Sender: TObject);
    procedure edtQuantidadeExit(Sender: TObject);
    procedure edtQuantidadeEnter(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnAPagarItemClick(Sender: TObject);
    procedure DBGridItensVendaDblClick(Sender: TObject);
    procedure btnIncluirProdutoClick(Sender: TObject);
    procedure btnPesquisarProdutoClick(Sender: TObject);
    procedure btnIncluirClienteClick(Sender: TObject);
    procedure btnPesquisarClienteClick(Sender: TObject);
  private
    { Private declarations }
    dtmVenda :TdtmVenda;
    oVenda : TVenda;
    function Gravar(EstadoDoCadastro : TEstadoDoCadastro) :boolean ; override;
    function Apagar:Boolean ; override;
    function TotaalizarProduto(valorUnitario, Quantidade: Double): Double;
    procedure LimparComponenteItem;
    procedure LimparCds;
    procedure CarregarRegistroSelecionado;
    function TotalizarVenda: Double;
  public
    { Public declarations }
  end;

var
  frmProVenda: TfrmProVenda;

implementation

{$R *.dfm}

uses URelProVenda , uPrincipal;


{$region 'override'}

  function TfrmProVenda.APagar: Boolean;
  begin
      if  oVenda.Selecionar(qryListagem.FieldByName('vendaId').AsInteger,dtmVenda.cdsItensVenda ) then begin
        Result := oVenda.apagar;
        end;

  end;

function TfrmProVenda.Gravar(EstadoDoCadastro: TEstadoDoCadastro): Boolean;
  begin
      if edtVendasId.Text<> EmptyStr then
          oVenda.VendaId := StrToInt(edtVendasId.Text)
      else
         oVenda.VendaId :=0;

      oVenda.ClienteId := lkpCliente.KeyValue;
      oVenda.Datavenda := edtDataVenda.Date;
      oVenda.TotalVenda := edtValorTotal.Value;

      if (EstadoDoCadastro=ecInserir) then
        oVenda.VendaId := oVenda.Inserir(dtmVenda.cdsItensVenda)
      else if(EstadoDoCadastro=ecAlterar) then
        oVenda.Atualizar(dtmVenda.cdsItensVenda);

        frmRelProVenda:= TfrmRelProVenda.Create(self);

        frmRelProVenda.QryVenda.Close;
        frmRelProVenda.QryVenda.ParamByName('vendaId').AsInteger := oVenda.VendaId;
        frmRelProVenda.QryVenda.Open;

        frmRelProVenda.QryVendasItens.Close;
        frmRelProVenda.QryVendasItens.ParamByName('vendaId').AsInteger := oVenda.VendaId;
        frmRelProVenda.QryVendasItens.Open  ;

        frmRelProVenda.Relatorio.PreviewModal ;
        frmRelProVenda.Release;


        Result:= true;

  end;

procedure TfrmProVenda.lkpProdutoExit(Sender: TObject);
begin
  inherited;

  if TDBLookupComboBox(Sender).KeyValue<>Null then begin
    edtValorUnitario.Value := dtmVenda.QryProduto.FieldByName('valor').AsFloat;
    edtQuantidade.Value := 1 ;
    edtTotalProduto.Value := TotaalizarProduto(edtValorUnitario.Value , edtQuantidade.Value);
  end;

end;

{$endRegion}


procedure TfrmProVenda.btnAdicionarItemClick(Sender: TObject);
begin
  inherited;

  if lkpProduto.KeyValue = null then begin
    MessageDlg('Produto é um campo obrigatório ',mtInformation ,[mbOK],0 );
    lkpProduto.SetFocus;
    Abort;
  end;


  if edtValorUnitario.Value <=0 then begin
     MessageDlg('Valor unitário não pode ser zero ',mtInformation ,[mbOK],0 );
     edtValorUnitario.SetFocus;
    Abort;
  end;

  if edtQuantidade.Value <=0 then begin
    MessageDlg('Quantidade não pode ser Zero ',mtInformation ,[mbOK],0 );
    edtQuantidade.SetFocus;
    Abort;
  end;

  if dtmVenda.cdsItensVenda.Locate('produtoid', lkpProduto.KeyValue, []) then begin
      MessageDlg('Este produto já foi selecionado' ,mtInformation ,[mbOK],0 );
    lkpProduto.SetFocus;
    Abort;

  end;

 edtTotalProduto.Value := TotaalizarProduto(edtValorUnitario.Value , edtQuantidade.Value);
 dtmVenda.cdsItensVenda.Append;
 dtmVenda.cdsItensVenda.FieldByName('produtoId').AsString := lkpProduto.KeyValue;
 dtmVenda.cdsItensVenda.FieldByName('nomeProduto').AsString := dtmVenda.QryProduto.FieldByName('nome').AsString;
 dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat := edtQuantidade.Value;
 dtmVenda.cdsItensVenda.FieldByName('valorUnitario').AsFloat := edtValorUnitario.Value;
 dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat := edtTotalProduto.Value;
 dtmVenda.cdsItensVenda.Post;
 edtValorTotal.Value := TotalizarVenda;
 LimparComponenteItem;
 lkpProduto.SetFocus;

end;

procedure TfrmProVenda.LimparCds;
begin
  dtmVenda.cdsItensVenda.First;
  while not dtmVenda.cdsItensVenda.Eof do
    dtmVenda.cdsItensVenda.Delete;

end;


procedure TfrmProVenda.LimparComponenteItem;
begin
     lkpProduto.KeyValue := null;
     edtQuantidade.Value := 0;
     edtValorUnitario.Value := 0;
     edtTotalProduto.Value := 0;


end;

function TfrmProVenda.TotaalizarProduto(valorUnitario, Quantidade :Double ) :Double;
begin
  result := valorUnitario* Quantidade;
end;

procedure TfrmProVenda.btnAlterarClick(Sender: TObject);
begin
      if oVenda.Selecionar(qryListagem.FieldByName('vendaId').AsInteger , dtmVenda.cdsItensVenda ) then begin
        edtVendasId.text := IntToStr(ovenda.VendaId);
        lkpCliente.KeyValue := oVenda.ClienteId;
        edtValorTotal.Value := oVenda.TotalVenda;
        edtDataVenda.Date := oVenda.Datavenda;

  end
  else begin
      btnCancelar.Click    ;
      Abort;
  end;



  inherited;

end;

procedure TfrmProVenda.btnAPagarItemClick(Sender: TObject);
begin
  inherited;
  if lkpProduto.KeyValue = null then begin
    MessageDlg(' Selecione o Produto a ser excluído', mtInformation , [mbOK],0);
    DBGridItensVenda.SetFocus;
    Abort

  end;

  if dtmVenda.cdsItensVenda.Locate('produtoId', lkpProduto.KeyValue, []) then begin

    dtmVenda.cdsItensVenda.Delete;
    LimparComponenteItem;

  end;
  edtValorTotal.Value := TotalizarVenda;

end;

procedure TfrmProVenda.btnCancelarClick(Sender: TObject);
begin
  inherited;
   LimparCds;
end;

procedure TfrmProVenda.btnGravarClick(Sender: TObject);
begin
  inherited;
 LimparCds
end;

procedure TfrmProVenda.btnIncluirClienteClick(Sender: TObject);
begin
  inherited;
  TFuncao.CriarForm(TfrmCadCliente, oUsuarioLogado ,dtmPrincipal.ConexaoDB);
  dtmVenda.QryCliente.Refresh;
end;

procedure TfrmProVenda.btnIncluirProdutoClick(Sender: TObject);
begin
  inherited;
  TFuncao.CriarForm(TfrmCadProduto , oUsuarioLogado ,dtmPrincipal.ConexaoDB);
  dtmVenda.QryProduto.Refresh;
end;

procedure TfrmProVenda.btnNovoClick(Sender: TObject);
begin
  inherited;
  edtDataVenda.Date := Date;
  lkpCliente.SetFocus;
  LimparCds;
end;

procedure TfrmProVenda.btnPesquisarClienteClick(Sender: TObject);
begin
  inherited;
  try
   frmConCliente := TfrmConCliente.Create(Self);

   if lkpCliente.KeyValue <>Null then
      frmConCliente.aIniciarPesquisaId := lkpCliente.KeyValue;

    frmConCliente.ShowModal;

    if frmConCliente.aRetornarIdSelecionado <> Unassigned then
      lkpCliente.KeyValue := frmConCliente.aRetornarIdSelecionado;
  finally
    frmConCliente.Release;
  end;
end;

procedure TfrmProVenda.btnPesquisarProdutoClick(Sender: TObject);
begin
  inherited;
  try
   frmConProduto := TfrmConProduto.Create(Self);

   if lkpProduto.KeyValue <>Null then
      frmConProduto.aIniciarPesquisaId := lkpProduto.KeyValue;

    frmConProduto.ShowModal;

    if frmConProduto.aRetornarIdSelecionado <> Unassigned then
      lkpProduto.KeyValue := frmConProduto.aRetornarIdSelecionado;
  finally
    frmConProduto.Release;
  end;
end;

procedure TfrmProVenda.DBGridItensVendaDblClick(Sender: TObject);
begin
  inherited;
  CarregarRegistroSelecionado;
end;

procedure TfrmProVenda.DBGridItensVendaKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
     BloqueiaCtrl_del_DBGrid ( Key,Shift);
end;

procedure TfrmProVenda.edtQuantidadeEnter(Sender: TObject);
begin
  inherited;
 edtTotalProduto.Value := TotaalizarProduto(edtValorUnitario.Value , edtQuantidade.Value);
end;

procedure TfrmProVenda.edtQuantidadeExit(Sender: TObject);
begin
  inherited;
 edtTotalProduto.Value := TotaalizarProduto(edtValorUnitario.Value , edtQuantidade.Value);
end;

procedure TfrmProVenda.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  if Assigned(dtmVenda) then
    FreeAndNil(dtmVenda);

    if Assigned(oVenda) then
      FreeAndNil(oVenda);


end;

procedure TfrmProVenda.FormCreate(Sender: TObject);
begin
  inherited;
  dtmVenda := TdtmVenda.Create(Self);
  oVenda := TVenda.Create(dtmPrincipal.ConexaoDB);
  IndiceAtual := 'clienteID';


end;

procedure  TfrmProVenda.CarregarRegistroSelecionado;
begin
       lkpProduto.KeyValue := dtmVenda.cdsItensVenda.FieldByName('produtoId').AsString;
       edtQuantidade.Value := dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat;
       edtValorUnitario.Value := dtmVenda.cdsItensVenda.FieldByName('valorUnitario').AsFloat;
       edtTotalProduto.Value := dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat;

end;

function TfrmProVenda.TotalizarVenda :Double;
var Valor : Double;
begin
    valor :=0;
    dtmVenda.cdsItensVenda.First;
    while not dtmVenda.cdsItensVenda.Eof do begin
    valor := valor + dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').asFloat;
    dtmVenda.cdsItensVenda.Next
    end;
    Result:= valor;
end;

end.
